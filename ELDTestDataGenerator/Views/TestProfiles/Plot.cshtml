@model ELDTestDataGenerator.Models.EventSet
@{
    ViewBag.Title = "Travel Plot";

    var markerGreenURL = "http://maps.google.com/mapfiles/ms/icons/green-dot.png";
    var markerRedURL = "http://maps.google.com/mapfiles/ms/icons/red-dot.png";
    var markerBlueURL = "http://maps.google.com/mapfiles/ms/icons/blue-dot.png";
    var markerYellowURL = "http://maps.google.com/mapfiles/ms/icons/yellow-dot.png";


}


<h2>Travel Plot</h2>
<div id="map-canvas" style="height:600px;"></div>


@section localStyles {
    <style>
        #map_canvas  {
            /*max-width: none*/
            height: 600px;
            width: 100%;
        }
    </style>

}


@section scripts {
    @*<script src="https://maps.google.com/maps/api/js?key=AIzaSyAiALscvKkUhcRibyxTWSNMkYRjENCn5YU" type="text/javascript"></script>*@
<script src="https://maps.google.com/maps/api/js?key=AIzaSyDQDqc6qcVycbx21sLmoMsHWzFsSRh5T1o" type="text/javascript"></script>

    <script type="text/javascript">

    $(document).ready(function () {
        Initialize();
    });

    function Initialize() {
        var startingLatitude = @Model.eventObjects[0].transientOBDReadings.Latitude;
        var startingLongitude = @Model.eventObjects[0].transientOBDReadings.Longitude;
        //var trip = { lat: startingLatitude, lng:  startingLongitude };
        //var trip = { lat: 48.724511, lng: -122.4715 };
        var trip = { lat: 39.693, lng: -97.878 }; // middle of country...

        var mapOptions = {
            zoom: 4,
            center: trip
        };
        var mapElement = $('#map-canvas');
        var gmap = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        // build the markers from the object event set
        @{
            int mn = 0;
            foreach(var eo in Model.eventObjects)
            {
                mn++;
                //var marker = new google.maps.Marker({ position: trip, map: gmap });


                // set the color for the marker
                string markerIcon = markerRedURL;
                string title = "Driving/Intermediate";
                switch (eo.currentVehicleState.CurrentEventCode) {
                    case 1:
                        markerIcon = markerGreenURL; // off duty
                        title = string.Format("Off Duty for {0} seconds.", eo.DurationSeconds);
                        break;
                    case 2:
                        markerIcon = markerYellowURL; // sleeper
                        title = string.Format("Sleeper Berth for {0} seconds.", eo.DurationSeconds);
                        break;
                    case 4:
                        markerIcon = markerBlueURL; // on duty not driving
                        title = string.Format("On Duty Not Driving for {0} seconds.", eo.DurationSeconds);
                        break;

                    default:
                        // driving.  Red.
                        break;

                }
                // write out JS
                string jsString = string.Format("var marker_{0} = new google.maps.Marker({{position: {{lat: {1}, lng: {2} }}, map: gmap, title: '{3}', icon: '{4}'}});\n", mn, eo.transientOBDReadings.Latitude, eo.transientOBDReadings.Longitude, title, markerIcon);
                //string jsMarker = string.Format("marker_{0}.setIcon('{1}');\n", mn, markerIcon);

                @Html.Raw(jsString);
                @*@Html.Raw(jsMarker);*@



                    }
                }

    }


    </script>
}

